#!/usr/bin/python

from builtins import (ascii, bytes, chr, dict, filter, hex, input,
                      map, next, oct, pow, range, round,
                      str, super, zip)
import sys
import forgi.threedee.model.coarse_grain as ftmc
import warnings

tyagiPredictions = [
("1B23.cg", [[(49,65), (66,7)], [(10,25), (27,43)]]),
("1QF6.cg", [[(49,65), (66,7)]]),
("1QU2.cg", [[(10,25), (27,43)], [(49,65), (66,7)]]),
("1C0A.cg", [[(610,625), (627,643)], [(650,664), (666,607)]]),
("1EIY.cg", [[(10,25), (27,43)], [(49,65), (66,7)]]),
("1GAX.cg", [[(910,924), (926,942)]]),
("1F7U.cg", [[(949,965), (966,907)]]),
("1H4S.cg", [[(10,25), (27,43)], [(49,65), (66,7)]]),
("1N78.cg", [[(510,525), (527,543)], [(549,565), (566,507)]]),
("1J1U.cg", [[(510,526), (528,544)], [(550,566), (567,507)]]),
("1J2B.cg", [[(950,966), (967,907)]]),
("1QTQ.cg", [[(910,925), (927,943)], [(949,965),(966,907)]]),
("1EHZ.cg", [[(10,25), (27,43)], [(49,65), (66,7)]]),
("1FIR.cg", [[(49,65), (66,7)]]),
("1VTQ.cg", [[(10,25), (27,43)], [(48,64), (65,7)]]),
("1YFG.cg", [[(10,25), (27,43)], [(49,65), (66,7)]]),
("1NBS.cg", [[(91,112), (113,131)], [(132,234), (235, 90)]]),
("1GID.cg", [] ),
("1QA6.cg", [[(137,152), (154,105)]]),
("1E8O.cg", [[(128,143), (144,103)]]),
("1LNG.cg", [[(187,231), (233,145)]]),
("1MFQ.cg", [[(175,221), (222,128)]]),
("1U9S.cg", [[(80,94),(95,109)],[(110,230),(231,79)],[(176,194),(195,219)]]),
("1FFK.cg", [[(116,124),(125,129)],[(109,52),(53,66)],[(431,239),( 240,379)], 
     [(636,1365),(1366,2058)], [(905,1300),(1301, 1354)], [(699,727),(728,743)], 
     [(780,866),(868, 884)], [(1089,1267),(1268,1290)], [(1382,1400),(1401, 1721)], 
     [(1725,2050),(2051, 1374)], [(1535,1650),(1651,1655)], [(1634,1551),(1552,1569)], 
     [(1570,1627),(1628,1633)], [(1820, 2029),(2031,1752)],[(1785,1807),(1808,1812)], 
     [(2381,2407),(2409,2418)], [(2682,2712),(2713,2767)],[(28,480),(516,27)], [(32,451),(479,29)], 
     [(153,184),(440,41)], [(621,634),(2059,537)], [(1703,1715),(1718,1404)], [(1415,1680),(1697,1412)], 
     [(1891,1946),(1974,2008)], [(2293,2315),(2316,2464)], [(2134,2241),(2245,2256)], 
     [(2832,2848),(2909,2831)], [(780,866),(887, 774)], [(1045,1069),(1295, 910)], 
     [(1494,1511),(1514,1672)]]),
("1J5E.cg",[[(367,393),(395,46)], [(316,337),(339,350)], [(289,311),(312,115)], 
     [(821,879),(880, 575)], [(946,1235),(1237,1337)], [(993,1045),(1047,1210)], 
     [(1102,1073),(1074,1083)], [(198,219),(221,142)], [(588,651),(654,754)], 
     [(673,717),(734,672)], [(406,436),(442,492)]]),
("1NKW.cg",[[(18,70),(72,109)], [(520,30),(31,485)], [(825,1209),(1210,1263)], [(1289,1307),(1308,1662)],
      [(1665, 1992),(1993, 1283)], [(1443, 1580),(1581, 1584)], [(1563,1458),(1460, 1481)],
      [(1755, 1971),(1973,1691)], [(2326,2349),(2351, 2360)], [(2625,2653),(2655,2711)],
      [(35,457),(484,32)], [(160,191),(446,44)], [(56,69),(112, 55)], [(588,1274),(1275, 2000)],
      [(835, 848),(849, 954)], [(1643,1656),(1659, 1311)], [(1322, 1621),(1638, 1319)], 
      [(1724, 1742),(1743, 1747)], [(1827, 1888),(1916, 1950)], [(2238, 2260),(2261, 2406)],
      [(312, 327),(330, 334)], [(2076, 2179),(2183, 2202)]]),
("1KH6.cg",[[(8,23),(24,37)],[(39,48),(49,5)]])
    #Note: Entry 31 corresponds to an obsolete PDB id.
]

schlickAnnotations = [
  ("1NKW.cg", [[(24,526),(31,485)],[(32,484),(35,457)],[(55,112),(56,69)],[(128,119),(129,142)],
               [(156,45),(161,189)],[(348,336),(352,308)],[(696,807),(702,786)],
               [(745,713),(749,773)],[(848,835),(849,954)],[(1111,1102),(1115,1066)],
               [(1174,1002),(1178,1196)],[(1319,1638),(1322,1621)],[(1415,1398),(1420,1611)],
               [(1656,1643),(1659,1311)],[(1971,1755),(1977,1683)],[(2057,2414),(2060,2222)],
               [(2179,2076),(2183,2202)],[(2349,2326),(2351,2360)],[(2425,2407),(2434,2475)],
               [(2496,2546),(2499,2524)],[(2789,2861),(2790,2806)]]),
  ("1E8O.cg", [[(143,128),(144,103)]]),
  ("1EFW.cg", [[(25,10),(27,43)],[(65,49),(66,7)]]),
  ("1EHZ.cg", [[(25,10),(27,43)],[(65,49),(66,7)]]),
  ("1KH6.cg", [[(23,8),(24,37)],[(48,39),(49,5)]]),
  ("1L9A.cg", [[(220,177),(222,128)]]),
  ("1LNG.cg", [[(231,187),(233,145)]]),
  ("1M5O.cg", [[(7,85),(8,14)],[(68,15),(69,84)]]),
  ("1N78.cg", [[(525,510),(527,543)],[(565,549),(566,507)]]),
  ("1NBS.cg", [[(112,91),(114,129)],[(232,180),(233,133)],[(234,132),(235,90)]]),
  ("1NYI.cg", [[(104,23),(109,118)]]),
  ("1QRS.cg", [[(25,10),(27,43)],[(65,49),(66,7)]]),
  ("1S72.cg", [[(21,522),(28,480)],[(29,479),(32,451)],[(52,109),(53,66)],[(149,42),(154,182)],
               [(239,431),(244,267)],[(344,332),(349,302)],[(774,887),(780,866)],
               [(823,791),(828,853)],[(928,915),(931,1039)],[(1205,1194),(1208,1159)],
               [(1267,1089),(1268,1290)],[(1300,905),(1305,1349)],[(1412,1697),(1415,1680)],
               [(1551,1634),(1552,1569)],[(1715,1703),(1718,1404)],[(2115,2470),(2118,2276)],
               [(2241,2134),(2245,2256)],[(2552,2602),(2555,2580)],[(2831,2909),(2832,2848)]]),
  ("1U0B.cg", [[(25,10),(27,43)],[(65,49),(66,7)]]),
  ("1U6B.cg", [[(9,1),(13,37)],[(93,51),(94,124)],[(143,41),(144,166)]]),
  ("1U8D.cg", [[(21,75),(27,43)]]),
  ("1U9S.cg", [[(94,80),(96,107)],[(119,222),(132,168)],[(194,176),(196,217)],[(230,110),(231,79)]]),
  ("1UN6.cg", [[(65,14),(66,109)]]),
  ("1X8W.cg", [[(138,180),(141,162)]]),
  ("1Y0Q.cg", [[(138,127),(142,155)]]),
  ("1Y26.cg", [[(72,54),(75,21)]]),
  ("2A2E.cg", [[(87,73),(88,101)],[(169,151),(172,189)],[(202,102),(204,71)]]),
  ("2A64.cg", [[(21,338),(23,44)],[(62,250),(63,81)],[(242,190),(243,140)],[(307,278),(308,329)],
               [(344,15),(345,384)],[(113,92),(115,136)],[(244,139),(245,91)]]),
  ("2AVY.cg", [[(764,577),(769,810)],[(879,821),(881,569)],[(19,916),(27,556)],
               [(106,61),(113,314)],[(176,146),(184,193)],[(219,198),(221,142)],
               [(311,289),(312,115)],[(337,316),(339,350)],[(392,369),(395,46)],
               [(651,588),(655,751)],[(672,734),(677,713)],[(857,829),(861,868)],
               [(1034,1027),(1037,1003)],[(1044,997),(1047,1210)],[(1073,1102),(1074,1083)],
               [(1116,1184),(1118,1155)]]),
  ("2AW4.cg", [[(25,515),(31,474)],[(32,473),(35,445)],[(130,121),(131,148)],[(179,46),(184,212)],
               [(683,794),(689,773)],[(732,700),(736,760)],[(835,822),(838,940)],
               [(1101,1090),(1104,1055)],[(1163,991),(1164,1185)],[(1261,579),(1269,2011)],
               [(1294,1276),(1295,1645)],[(1306,1622),(1309,1605)],[(1444,1547),(1445,1466)],
               [(1525,1467),(1529,1542)],[(1639,1627),(1642,1298)],[(1988,1764),(1994,1666)],
               [(2009,1648),(2010,1270)],[(2074,2435),(2077,2243)],[(2196,2093),(2200,2223)],
               [(2370,2347),(2372,2381)],[(2446,2064),(2455,2500)],[(2517,2567),(2520,2545)],
               [(2805,2791),(2811,2889)],[(2812,2888),(2815,2831)]]),
  ("3F4E.cg", [[(27,15),(31,84)],[(46,33),(50,59)]]),
  ("2J00.cg", [[(19,916),(27,556)],[(106,61),(113,314)],[(311,289),(312,115)],[(337,316),(339,350)],[(392,369),(395,46)],[(651,588),(655,751)],[(672,734),(677,713)],[(857,829),(861,868)],[(1033,1029),(1040,1001)],[(1044,997),(1047,1210)],[(1073,1102),(1074,1083)],[(1116,1184),(1118,1155)]]),
  ("2J01.cg", [[(24,516),(31,474)],[(32,473),(35,445)],[(56,114),(57,70)],[(179,45),(184,212)],[(337,325),(341,297)],[(683,794),(689,773)],[(732,700),(736,760)],[(835,822),(836,943)],[(1195,812),(1198,1247)],[(1261,589),(1269,2011)],[(1267,991),(1268,1290)],[(1294,1276),(1295,1645)],[(1306,1622),(1309,1605)],[(1402,1385),(1405,1597)],[(1444,1547),(1445,1466)],[(1639,1627),(1642,1298)],[(1788,1776),(1792,1827)],[(1975,1830),(1979,1772)],[(1988,1764),(1994,1666)],[(2009,1648),(2010,1270)],[(2074,2435),(2077,2243)],[(2196,2093),(2200,2223)],[(2370,2347),(2372,2381)],[(2446,2064),(2455,2496)],[(2517,2567),(2520,2545)],[(2580,2508),(2588,2606)],[(2674,2646),(2676,2731)],[(2769,2735),(2771,2643)],[(2814,2886),(2815,2831)]]),
  ("2BTE.cg", [[(65,49),(66,7)]]),
  #("2B57.cg", [[(72,54),(75,21)] ]),
  ("2CKY.cg", [[(5,75),(7,39)] ]),
  ("2CZJ.cg", [[(65,49),(68,5)] ]),
  ("2EES.cg", [[(72,54),(75,21)] ]),
  ("2GDI.cg", [[(14,85),(15,51)] ]),
  ("2HOJ.cg", [[(14,85),(15,51)] ]),
  ("2NR0.cg", [[(65,49),(66,7)] ]),
  ("2NZ4.cg", [[(7,52),(8,26)] ]),
  ("2OIU.cg", [[(7,45),(8,17)] ]),
  ("2QBZ.cg", [[(54,120),(56,85)] ]),
  ("3BWP.cg", [[(40,28),(43,65)] ]),
  ("3DIL.cg", [[(9,166),(14,78)], [(140,114),(142,161)], ]),
  ("3E5C.cg", [[(35,9),(40,47)] ]),
  ("3EOH.cg", [[(40,28),(43,65)] ]),
  ("3F2Q.cg", [[(27,15),(31,84)], [(46,33),(49,60)], [(80,64),(83,32)], [(97,86),(105,8)] ]),
  ("3IIN.cg", [[(93,51),(94,124)] ]),
  #("3IVK.cg", [[(54,106),(55,69)], [(85,72),(86,105)] ]),
  ("3KTW.cg", [[(231,189),(234,144)] ]),

]

def bulge_from_seqids(cg, bp1, bp2, asserts=True):
    try:
        stem1 = cg.nucleotides_to_elements([cg.seq_id_to_pos(bp1[0]), cg.seq_id_to_pos(bp1[1])])
        if asserts: assert cg.pairing_partner(cg.seq_id_to_pos(bp1[0])) == cg.seq_id_to_pos(bp1[1])
        if asserts: assert len(stem1) == 1
        stem1, =stem1
        stem2 = cg.nucleotides_to_elements([cg.seq_id_to_pos(bp2[0]), cg.seq_id_to_pos(bp2[1])])
        if asserts: assert cg.pairing_partner(cg.seq_id_to_pos(bp2[0])) == cg.seq_id_to_pos(bp2[1])
        if asserts: assert len(stem2) == 1
        stem2, =stem2
        if asserts: assert stem1 != stem2
        bulges = (cg.edges[stem1] & cg.edges[stem2])
        if asserts: assert len(bulges)>=1
        if len(bulges)==0: return None
        bulge = bulges.pop()
        return bulge
    except ValueError as e:
        if asserts: assert False
        return None


if __name__ == "__main__":
    for name, data in [("schlick", schlickAnnotations), ("tyagi", tyagiPredictions)]:
        print("********************** " + name + " ********************")
        for method in 'CG', 'Tyagi':
            print ("===== {} =====".format(method))
            true_found = 0
            true_not_found = 0
            true_different_ss = 0
            extra_found = 0
            for pdb, stacks in data:            
                cg = ftmc.CoarseGrainRNA("test/forgi/threedee/data/stacking/"+pdb)
                for stack in stacks:
                    try:
                        bulge = bulge_from_seqids(cg, stack[0], stack[1], True)
                    except AssertionError:
                        try:
                            print(pdb, stack[0], stack[1], 
                              cg.pairing_partner(cg.seq_id_to_pos(stack[0][0])), 
                              cg.pairing_partner(cg.seq_id_to_pos(stack[0][1])),
                              cg.pairing_partner(cg.seq_id_to_pos(stack[1][0])), 
                              cg.pairing_partner(cg.seq_id_to_pos(stack[1][1])), file=sys.stderr)
                        except: pass
                        true_different_ss += 1
                    else:
                        if cg.is_stacking(bulge, method, verbose=False):
                            true_found+=1
                        else:
                            true_not_found+=1
                for d in cg.defines:
                    if d[0]=="m" and cg.is_stacking(d, method, verbose=False):
                        for other in stacks:
                            if d == bulge_from_seqids(cg, other[0], other[1], asserts=False):
                                break
                        else:
                            if name=="schlick":
                                stem1, stem2 = cg.connections(d)
                                if cg.stem_length(stem1)==1 or  cg.stem_length(stem2)==1:
                                    continue
                            #print(d)
                            extra_found+=1
            all_true = true_found+true_not_found+true_different_ss
            print("Out of {:4}, {:4} were found, {:4} not found, {:4} different sec structure".format(all_true, true_found, true_not_found, true_different_ss))
            print("Out of {:4}, {:4.2f}% were found, {:4.2f}% not found, {:4.2f}% different sec structure".format(all_true, true_found/all_true*100, true_not_found/all_true*100, true_different_ss/all_true*100))
            print("{} Additional stacks found.".format(extra_found))
